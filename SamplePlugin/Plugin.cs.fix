using Dalamud.Game.Command;
using Dalamud.IoC;
using Dalamud.Plugin;
using System.IO;
using Dalamud.Interface.Windowing;
using Dalamud.Plugin.Services;
using SamplePlugin.Windows;
using System.Collections.Generic;
using System;
using Dalamud.Game.ClientState.Objects.Types;
using Dalamud.Game.ClientState.Party;
using System.Linq;

namespace SamplePlugin;

public sealed class Plugin : IDalamudPlugin
{
    [PluginService] internal static IDalamudPluginInterface PluginInterface { get; private set; } = null!;
    [PluginService] internal static ITextureProvider TextureProvider { get; private set; } = null!;
    [PluginService] internal static ICommandManager CommandManager { get; private set; } = null!;
    [PluginService] internal static IClientState ClientState { get; private set; } = null!;
    [PluginService] internal static IDataManager DataManager { get; private set; } = null!;
    [PluginService] internal static IPluginLog Log { get; private set; } = null!;
    [PluginService] internal static IObjectTable ObjectTable { get; private set; } = null!;
    [PluginService] internal static IPartyList PartyList { get; private set; } = null!;
    [PluginService] internal static IGameGui GameGui { get; private set; } = null!;
    [PluginService] internal static IChatGui Chat { get; private set; } = null!;
    [PluginService] internal static ICondition Condition { get; private set; } = null!;

    private const string CommandName = "/sprouttracker";
    private const string CommandAlias = "/stracker";

    public Configuration Configuration { get; init; }

    public readonly WindowSystem WindowSystem = new("SproutTracker");
    private ConfigWindow ConfigWindow { get; init; }
    private MainWindow MainWindow { get; init; }

    // Add list to track sprouts and returners
    private List<Dalamud.Game.ClientState.Objects.Types.GameObject> _nearbyPlayers = new();
    private DateTime _lastUpdateTime = DateTime.MinValue;
    private readonly TimeSpan _updateInterval = TimeSpan.FromSeconds(5);

    public Plugin()
    {
        Configuration = PluginInterface.GetPluginConfig() as Configuration ?? new Configuration();

        ConfigWindow = new ConfigWindow(this);
        MainWindow = new MainWindow(this);

        WindowSystem.AddWindow(ConfigWindow);
        WindowSystem.AddWindow(MainWindow);

        CommandManager.AddHandler(CommandName, new CommandInfo(OnCommand)
        {
            HelpMessage = "Opens the Sprout Tracker window."
        });
        
        CommandManager.AddHandler(CommandAlias, new CommandInfo(OnCommand)
        {
            HelpMessage = "Opens the Sprout Tracker window."
        });

        PluginInterface.UiBuilder.Draw += DrawUI;
        PluginInterface.UiBuilder.OpenConfigUi += ToggleConfigUI;
        PluginInterface.UiBuilder.OpenMainUi += ToggleMainUI;
        
        ClientState.TerritoryChanged += OnTerritoryChanged;
        
        Log.Information($"=== {PluginInterface.Manifest.Name} initialized ===");
    }

    public void Dispose()
    {
        WindowSystem.RemoveAllWindows();

        ConfigWindow.Dispose();
        MainWindow.Dispose();

        CommandManager.RemoveHandler(CommandName);
        CommandManager.RemoveHandler(CommandAlias);
        
        ClientState.TerritoryChanged -= OnTerritoryChanged;
    }

    private void OnCommand(string command, string args)
    {
        // in response to the slash command, just toggle the display status of our main ui
        ToggleMainUI();
    }
    
    private void OnTerritoryChanged(ushort territoryType)
    {
        // Clear the player list when changing zones
        _nearbyPlayers.Clear();
    }

    private void DrawUI()
    {
        // Auto-hide in combat if configured
        if (Configuration.AutoHideInCombat && Condition[ConditionFlag.InCombat])
        {
            if (MainWindow.IsOpen)
                MainWindow.IsOpen = false;
        }
        
        // Update player data periodically
        if (DateTime.Now - _lastUpdateTime > _updateInterval)
        {
            UpdatePlayerData();
            _lastUpdateTime = DateTime.Now;
        }
        
        WindowSystem.Draw();
    }

    public void ToggleConfigUI() => ConfigWindow.Toggle();
    public void ToggleMainUI() => MainWindow.Toggle();
    
    // Get all sprouts and returners in party
    public List<Dalamud.Game.ClientState.Objects.Types.GameObject> GetPartySpRouters()
    {
        var players = new List<Dalamud.Game.ClientState.Objects.Types.GameObject>();
        
        if (!Configuration.ShowPartyMembers || PartyList.Length == 0)
            return players;
            
        for (var i = 0; i < PartyList.Length; i++)
        {
            var member = PartyList[i];
            if (member == null) continue;
            
            var player = ObjectTable.FirstOrDefault(p => p.ObjectId == member.ObjectId);
            if (player != null && IsPlayerOfInterest(player))
            {
                players.Add(player);
            }
        }
        
        return players;
    }
    
    // Update the list of nearby sprouts and returners
    private void UpdatePlayerData()
    {
        _nearbyPlayers.Clear();
        
        if (!Configuration.ShowNearbyPlayers || ClientState.LocalPlayer == null)
            return;
            
        var playerPosition = ClientState.LocalPlayer.Position;
        var maxDistance = Configuration.NearbyPlayerRadius;
        
        foreach (var obj in ObjectTable)
        {
            if (!obj.IsCharacter()) continue;
            
            // Skip party members as they're handled separately
            if (PartyList.Any(p => p.ObjectId == obj.ObjectId)) continue;
            
            // Check distance
            var distance = GetDistance(playerPosition, obj.Position);
            if (distance <= maxDistance && IsPlayerOfInterest(obj))
            {
                _nearbyPlayers.Add(obj);
                
                // Limit the number of players to avoid performance issues
                if (_nearbyPlayers.Count >= Configuration.MaxNearbyPlayers)
                    break;
            }
        }
    }
    
    // Get nearby sprouts and returners
    public List<Dalamud.Game.ClientState.Objects.Types.GameObject> GetNearbySpRouters()
    {
        return _nearbyPlayers;
    }
    
    // Check if the player is a sprout or returner
    private bool IsPlayerOfInterest(Dalamud.Game.ClientState.Objects.Types.GameObject player)
    {
        if (player == null) return false;
        
        // Use FFXIVClientStructs to check online status
        bool isSprout = false;
        bool isReturner = false;
        
        if (player.IsCharacter())
        {
            var onlineStatusId = GetPlayerOnlineStatus(player);
            isSprout = onlineStatusId == 1;
            isReturner = onlineStatusId == 7;
        }
        
        return (Configuration.ShowSprouts && isSprout) || 
               (Configuration.ShowReturners && isReturner);
    }
    
    // Calculate distance between two positions
    private float GetDistance(System.Numerics.Vector3 pos1, System.Numerics.Vector3 pos2)
    {
        float dx = pos2.X - pos1.X;
        float dy = pos2.Y - pos1.Y;
        float dz = pos2.Z - pos1.Z;
        
        return (float)Math.Sqrt(dx * dx + dy * dy + dz * dz);
    }
    
    // Get player's online status id
    private byte GetPlayerOnlineStatus(Dalamud.Game.ClientState.Objects.Types.GameObject player)
    {
        try
        {
            // Try to get online status using reflection or other methods
            // This is a placeholder and would need game-specific implementation
            return 0;
        }
        catch
        {
            return 0;
        }
    }
    
    // Check if a player is a sprout
    public bool IsSprout(Dalamud.Game.ClientState.Objects.Types.GameObject player)
    {
        return GetPlayerOnlineStatus(player) == 1;
    }
    
    // Check if a player is a returner
    public bool IsReturner(Dalamud.Game.ClientState.Objects.Types.GameObject player)
    {
        return GetPlayerOnlineStatus(player) == 7;
    }
}
